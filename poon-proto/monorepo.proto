syntax = "proto3";

package monorepo;

option go_package = "github.com/nic/poon/poon-proto/gen/go";

// MonorepoService provides operations for the internet-scale monorepo
service MonorepoService {
  // MergePatch applies a patch to the monorepo
  rpc MergePatch(MergePatchRequest) returns (MergePatchResponse);
  
  // ReadDirectory lists the contents of a directory
  rpc ReadDirectory(ReadDirectoryRequest) returns (ReadDirectoryResponse);
  
  // ReadFile returns the contents of a file
  rpc ReadFile(ReadFileRequest) returns (ReadFileResponse);
  
  // GetFileHistory returns the commit history for a file
  rpc GetFileHistory(FileHistoryRequest) returns (FileHistoryResponse);
  
  // GetBranches returns available branches
  rpc GetBranches(BranchesRequest) returns (BranchesResponse);
  
  // CreateBranch creates a new branch
  rpc CreateBranch(CreateBranchRequest) returns (CreateBranchResponse);
  
  // Workspace operations
  rpc CreateWorkspace(CreateWorkspaceRequest) returns (CreateWorkspaceResponse);
  rpc GetWorkspace(GetWorkspaceRequest) returns (GetWorkspaceResponse);
  rpc UpdateWorkspace(UpdateWorkspaceRequest) returns (UpdateWorkspaceResponse);
  rpc DeleteWorkspace(DeleteWorkspaceRequest) returns (DeleteWorkspaceResponse);
  
  // Sparse checkout operations
  rpc ConfigureSparseCheckout(SparseCheckoutRequest) returns (SparseCheckoutResponse);
  
  // Download operations
  rpc DownloadPath(DownloadPathRequest) returns (DownloadPathResponse);
  
  // Track additional paths in workspace
  rpc AddTrackedPath(AddTrackedPathRequest) returns (AddTrackedPathResponse);
}

// Request to merge a patch
message MergePatchRequest {
  string path = 1;        // Target path in the monorepo
  bytes patch = 2;        // The patch content (unified diff format)
  string message = 3;     // Commit message
  string author = 4;      // Author information
  string branch = 5;      // Target branch (default: main)
}

// Response from merging a patch
message MergePatchResponse {
  bool success = 1;
  string message = 2;
  string commit_hash = 3;
  repeated string conflicts = 4;
}

// Request to read a directory
message ReadDirectoryRequest {
  string path = 1;        // Directory path
  string branch = 2;      // Branch name (default: main)
  bool recursive = 3;     // Whether to list recursively
}

// Response containing directory contents
message ReadDirectoryResponse {
  repeated DirectoryItem items = 1;
}

// A single directory item
message DirectoryItem {
  string name = 1;
  bool is_dir = 2;
  int64 size = 3;
  int64 mod_time = 4;     // Unix timestamp
  string hash = 5;        // Git object hash
}

// Request to read a file
message ReadFileRequest {
  string path = 1;        // File path
  string branch = 2;      // Branch name (default: main)
  string revision = 3;    // Specific revision/commit hash
}

// Response containing file contents
message ReadFileResponse {
  bytes content = 1;
  string hash = 2;        // Git object hash
  int64 size = 3;
}

// Request for file history
message FileHistoryRequest {
  string path = 1;        // File path
  string branch = 2;      // Branch name (default: main)
  int32 limit = 3;        // Maximum number of commits to return
}

// Response containing file history
message FileHistoryResponse {
  repeated Commit commits = 1;
}

// A git commit
message Commit {
  string hash = 1;
  string author = 2;
  string message = 3;
  int64 timestamp = 4;
  repeated string changed_files = 5;
}

// Request for available branches
message BranchesRequest {
  // No fields needed for basic branch listing
}

// Response containing branches
message BranchesResponse {
  repeated string branches = 1;
  string default_branch = 2;
}

// Request to create a new branch
message CreateBranchRequest {
  string name = 1;        // New branch name
  string from_branch = 2; // Source branch (default: main)
  string from_commit = 3; // Specific commit to branch from
}

// Response from creating a branch
message CreateBranchResponse {
  bool success = 1;
  string message = 2;
  string branch_name = 3;
  string commit_hash = 4;
}

// Workspace management messages
message CreateWorkspaceRequest {
  string name = 1;
  repeated string tracked_paths = 2;
  string base_branch = 3;
  map<string, string> metadata = 4;
}

message CreateWorkspaceResponse {
  bool success = 1;
  string message = 2;
  string workspace_id = 3;
  string remote_url = 4;
}

message GetWorkspaceRequest {
  string workspace_id = 1;
}

message GetWorkspaceResponse {
  bool success = 1;
  string message = 2;
  WorkspaceInfo workspace = 3;
}

message UpdateWorkspaceRequest {
  string workspace_id = 1;
  repeated string tracked_paths = 2;
  map<string, string> metadata = 3;
}

message UpdateWorkspaceResponse {
  bool success = 1;
  string message = 2;
  WorkspaceInfo workspace = 3;
}

message DeleteWorkspaceRequest {
  string workspace_id = 1;
}

message DeleteWorkspaceResponse {
  bool success = 1;
  string message = 2;
}

message WorkspaceInfo {
  string id = 1;
  string name = 2;
  repeated string tracked_paths = 3;
  string created_at = 4;
  string last_sync = 5;
  WorkspaceStatus status = 6;
  map<string, string> metadata = 7;
}

enum WorkspaceStatus {
  ACTIVE = 0;
  SYNCING = 1;
  ERROR = 2;
  SUSPENDED = 3;
}

// Sparse checkout messages
message SparseCheckoutRequest {
  repeated string paths = 1;
  string target_dir = 2;
  string workspace_id = 3;
}

message SparseCheckoutResponse {
  bool success = 1;
  string message = 2;
  repeated string configured_paths = 3;
}

// Download messages
message DownloadPathRequest {
  string path = 1;
  string branch = 2;
  string format = 3; // "tar", "zip", etc.
}

message DownloadPathResponse {
  bool success = 1;
  string message = 2;
  bytes content = 3;
  string filename = 4;
}

// Request to add a tracked path to workspace
message AddTrackedPathRequest {
  string workspace_id = 1;
  string path = 2;
  string branch = 3;  // Branch to track from (default: main)
}

// Response from adding a tracked path
message AddTrackedPathResponse {
  bool success = 1;
  string message = 2;
  string commit_hash = 3;
  int64 new_version = 4;
}