/**
 * @fileoverview gRPC-Web generated client stub for monorepo
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.27.3
// source: monorepo.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as monorepo_pb from './monorepo_pb'; // proto import: "monorepo.proto"


export class MonorepoServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorMergePatch = new grpcWeb.MethodDescriptor(
    '/monorepo.MonorepoService/MergePatch',
    grpcWeb.MethodType.UNARY,
    monorepo_pb.MergePatchRequest,
    monorepo_pb.MergePatchResponse,
    (request: monorepo_pb.MergePatchRequest) => {
      return request.serializeBinary();
    },
    monorepo_pb.MergePatchResponse.deserializeBinary
  );

  mergePatch(
    request: monorepo_pb.MergePatchRequest,
    metadata?: grpcWeb.Metadata | null): Promise<monorepo_pb.MergePatchResponse>;

  mergePatch(
    request: monorepo_pb.MergePatchRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: monorepo_pb.MergePatchResponse) => void): grpcWeb.ClientReadableStream<monorepo_pb.MergePatchResponse>;

  mergePatch(
    request: monorepo_pb.MergePatchRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: monorepo_pb.MergePatchResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/monorepo.MonorepoService/MergePatch',
        request,
        metadata || {},
        this.methodDescriptorMergePatch,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/monorepo.MonorepoService/MergePatch',
    request,
    metadata || {},
    this.methodDescriptorMergePatch);
  }

  methodDescriptorReadDirectory = new grpcWeb.MethodDescriptor(
    '/monorepo.MonorepoService/ReadDirectory',
    grpcWeb.MethodType.UNARY,
    monorepo_pb.ReadDirectoryRequest,
    monorepo_pb.ReadDirectoryResponse,
    (request: monorepo_pb.ReadDirectoryRequest) => {
      return request.serializeBinary();
    },
    monorepo_pb.ReadDirectoryResponse.deserializeBinary
  );

  readDirectory(
    request: monorepo_pb.ReadDirectoryRequest,
    metadata?: grpcWeb.Metadata | null): Promise<monorepo_pb.ReadDirectoryResponse>;

  readDirectory(
    request: monorepo_pb.ReadDirectoryRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: monorepo_pb.ReadDirectoryResponse) => void): grpcWeb.ClientReadableStream<monorepo_pb.ReadDirectoryResponse>;

  readDirectory(
    request: monorepo_pb.ReadDirectoryRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: monorepo_pb.ReadDirectoryResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/monorepo.MonorepoService/ReadDirectory',
        request,
        metadata || {},
        this.methodDescriptorReadDirectory,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/monorepo.MonorepoService/ReadDirectory',
    request,
    metadata || {},
    this.methodDescriptorReadDirectory);
  }

  methodDescriptorReadFile = new grpcWeb.MethodDescriptor(
    '/monorepo.MonorepoService/ReadFile',
    grpcWeb.MethodType.UNARY,
    monorepo_pb.ReadFileRequest,
    monorepo_pb.ReadFileResponse,
    (request: monorepo_pb.ReadFileRequest) => {
      return request.serializeBinary();
    },
    monorepo_pb.ReadFileResponse.deserializeBinary
  );

  readFile(
    request: monorepo_pb.ReadFileRequest,
    metadata?: grpcWeb.Metadata | null): Promise<monorepo_pb.ReadFileResponse>;

  readFile(
    request: monorepo_pb.ReadFileRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: monorepo_pb.ReadFileResponse) => void): grpcWeb.ClientReadableStream<monorepo_pb.ReadFileResponse>;

  readFile(
    request: monorepo_pb.ReadFileRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: monorepo_pb.ReadFileResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/monorepo.MonorepoService/ReadFile',
        request,
        metadata || {},
        this.methodDescriptorReadFile,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/monorepo.MonorepoService/ReadFile',
    request,
    metadata || {},
    this.methodDescriptorReadFile);
  }

  methodDescriptorGetFileHistory = new grpcWeb.MethodDescriptor(
    '/monorepo.MonorepoService/GetFileHistory',
    grpcWeb.MethodType.UNARY,
    monorepo_pb.FileHistoryRequest,
    monorepo_pb.FileHistoryResponse,
    (request: monorepo_pb.FileHistoryRequest) => {
      return request.serializeBinary();
    },
    monorepo_pb.FileHistoryResponse.deserializeBinary
  );

  getFileHistory(
    request: monorepo_pb.FileHistoryRequest,
    metadata?: grpcWeb.Metadata | null): Promise<monorepo_pb.FileHistoryResponse>;

  getFileHistory(
    request: monorepo_pb.FileHistoryRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: monorepo_pb.FileHistoryResponse) => void): grpcWeb.ClientReadableStream<monorepo_pb.FileHistoryResponse>;

  getFileHistory(
    request: monorepo_pb.FileHistoryRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: monorepo_pb.FileHistoryResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/monorepo.MonorepoService/GetFileHistory',
        request,
        metadata || {},
        this.methodDescriptorGetFileHistory,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/monorepo.MonorepoService/GetFileHistory',
    request,
    metadata || {},
    this.methodDescriptorGetFileHistory);
  }

  methodDescriptorGetBranches = new grpcWeb.MethodDescriptor(
    '/monorepo.MonorepoService/GetBranches',
    grpcWeb.MethodType.UNARY,
    monorepo_pb.BranchesRequest,
    monorepo_pb.BranchesResponse,
    (request: monorepo_pb.BranchesRequest) => {
      return request.serializeBinary();
    },
    monorepo_pb.BranchesResponse.deserializeBinary
  );

  getBranches(
    request: monorepo_pb.BranchesRequest,
    metadata?: grpcWeb.Metadata | null): Promise<monorepo_pb.BranchesResponse>;

  getBranches(
    request: monorepo_pb.BranchesRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: monorepo_pb.BranchesResponse) => void): grpcWeb.ClientReadableStream<monorepo_pb.BranchesResponse>;

  getBranches(
    request: monorepo_pb.BranchesRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: monorepo_pb.BranchesResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/monorepo.MonorepoService/GetBranches',
        request,
        metadata || {},
        this.methodDescriptorGetBranches,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/monorepo.MonorepoService/GetBranches',
    request,
    metadata || {},
    this.methodDescriptorGetBranches);
  }

  methodDescriptorCreateBranch = new grpcWeb.MethodDescriptor(
    '/monorepo.MonorepoService/CreateBranch',
    grpcWeb.MethodType.UNARY,
    monorepo_pb.CreateBranchRequest,
    monorepo_pb.CreateBranchResponse,
    (request: monorepo_pb.CreateBranchRequest) => {
      return request.serializeBinary();
    },
    monorepo_pb.CreateBranchResponse.deserializeBinary
  );

  createBranch(
    request: monorepo_pb.CreateBranchRequest,
    metadata?: grpcWeb.Metadata | null): Promise<monorepo_pb.CreateBranchResponse>;

  createBranch(
    request: monorepo_pb.CreateBranchRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: monorepo_pb.CreateBranchResponse) => void): grpcWeb.ClientReadableStream<monorepo_pb.CreateBranchResponse>;

  createBranch(
    request: monorepo_pb.CreateBranchRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: monorepo_pb.CreateBranchResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/monorepo.MonorepoService/CreateBranch',
        request,
        metadata || {},
        this.methodDescriptorCreateBranch,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/monorepo.MonorepoService/CreateBranch',
    request,
    metadata || {},
    this.methodDescriptorCreateBranch);
  }

  methodDescriptorCreateWorkspace = new grpcWeb.MethodDescriptor(
    '/monorepo.MonorepoService/CreateWorkspace',
    grpcWeb.MethodType.UNARY,
    monorepo_pb.CreateWorkspaceRequest,
    monorepo_pb.CreateWorkspaceResponse,
    (request: monorepo_pb.CreateWorkspaceRequest) => {
      return request.serializeBinary();
    },
    monorepo_pb.CreateWorkspaceResponse.deserializeBinary
  );

  createWorkspace(
    request: monorepo_pb.CreateWorkspaceRequest,
    metadata?: grpcWeb.Metadata | null): Promise<monorepo_pb.CreateWorkspaceResponse>;

  createWorkspace(
    request: monorepo_pb.CreateWorkspaceRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: monorepo_pb.CreateWorkspaceResponse) => void): grpcWeb.ClientReadableStream<monorepo_pb.CreateWorkspaceResponse>;

  createWorkspace(
    request: monorepo_pb.CreateWorkspaceRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: monorepo_pb.CreateWorkspaceResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/monorepo.MonorepoService/CreateWorkspace',
        request,
        metadata || {},
        this.methodDescriptorCreateWorkspace,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/monorepo.MonorepoService/CreateWorkspace',
    request,
    metadata || {},
    this.methodDescriptorCreateWorkspace);
  }

  methodDescriptorGetWorkspace = new grpcWeb.MethodDescriptor(
    '/monorepo.MonorepoService/GetWorkspace',
    grpcWeb.MethodType.UNARY,
    monorepo_pb.GetWorkspaceRequest,
    monorepo_pb.GetWorkspaceResponse,
    (request: monorepo_pb.GetWorkspaceRequest) => {
      return request.serializeBinary();
    },
    monorepo_pb.GetWorkspaceResponse.deserializeBinary
  );

  getWorkspace(
    request: monorepo_pb.GetWorkspaceRequest,
    metadata?: grpcWeb.Metadata | null): Promise<monorepo_pb.GetWorkspaceResponse>;

  getWorkspace(
    request: monorepo_pb.GetWorkspaceRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: monorepo_pb.GetWorkspaceResponse) => void): grpcWeb.ClientReadableStream<monorepo_pb.GetWorkspaceResponse>;

  getWorkspace(
    request: monorepo_pb.GetWorkspaceRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: monorepo_pb.GetWorkspaceResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/monorepo.MonorepoService/GetWorkspace',
        request,
        metadata || {},
        this.methodDescriptorGetWorkspace,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/monorepo.MonorepoService/GetWorkspace',
    request,
    metadata || {},
    this.methodDescriptorGetWorkspace);
  }

  methodDescriptorUpdateWorkspace = new grpcWeb.MethodDescriptor(
    '/monorepo.MonorepoService/UpdateWorkspace',
    grpcWeb.MethodType.UNARY,
    monorepo_pb.UpdateWorkspaceRequest,
    monorepo_pb.UpdateWorkspaceResponse,
    (request: monorepo_pb.UpdateWorkspaceRequest) => {
      return request.serializeBinary();
    },
    monorepo_pb.UpdateWorkspaceResponse.deserializeBinary
  );

  updateWorkspace(
    request: monorepo_pb.UpdateWorkspaceRequest,
    metadata?: grpcWeb.Metadata | null): Promise<monorepo_pb.UpdateWorkspaceResponse>;

  updateWorkspace(
    request: monorepo_pb.UpdateWorkspaceRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: monorepo_pb.UpdateWorkspaceResponse) => void): grpcWeb.ClientReadableStream<monorepo_pb.UpdateWorkspaceResponse>;

  updateWorkspace(
    request: monorepo_pb.UpdateWorkspaceRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: monorepo_pb.UpdateWorkspaceResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/monorepo.MonorepoService/UpdateWorkspace',
        request,
        metadata || {},
        this.methodDescriptorUpdateWorkspace,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/monorepo.MonorepoService/UpdateWorkspace',
    request,
    metadata || {},
    this.methodDescriptorUpdateWorkspace);
  }

  methodDescriptorDeleteWorkspace = new grpcWeb.MethodDescriptor(
    '/monorepo.MonorepoService/DeleteWorkspace',
    grpcWeb.MethodType.UNARY,
    monorepo_pb.DeleteWorkspaceRequest,
    monorepo_pb.DeleteWorkspaceResponse,
    (request: monorepo_pb.DeleteWorkspaceRequest) => {
      return request.serializeBinary();
    },
    monorepo_pb.DeleteWorkspaceResponse.deserializeBinary
  );

  deleteWorkspace(
    request: monorepo_pb.DeleteWorkspaceRequest,
    metadata?: grpcWeb.Metadata | null): Promise<monorepo_pb.DeleteWorkspaceResponse>;

  deleteWorkspace(
    request: monorepo_pb.DeleteWorkspaceRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: monorepo_pb.DeleteWorkspaceResponse) => void): grpcWeb.ClientReadableStream<monorepo_pb.DeleteWorkspaceResponse>;

  deleteWorkspace(
    request: monorepo_pb.DeleteWorkspaceRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: monorepo_pb.DeleteWorkspaceResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/monorepo.MonorepoService/DeleteWorkspace',
        request,
        metadata || {},
        this.methodDescriptorDeleteWorkspace,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/monorepo.MonorepoService/DeleteWorkspace',
    request,
    metadata || {},
    this.methodDescriptorDeleteWorkspace);
  }

  methodDescriptorConfigureSparseCheckout = new grpcWeb.MethodDescriptor(
    '/monorepo.MonorepoService/ConfigureSparseCheckout',
    grpcWeb.MethodType.UNARY,
    monorepo_pb.SparseCheckoutRequest,
    monorepo_pb.SparseCheckoutResponse,
    (request: monorepo_pb.SparseCheckoutRequest) => {
      return request.serializeBinary();
    },
    monorepo_pb.SparseCheckoutResponse.deserializeBinary
  );

  configureSparseCheckout(
    request: monorepo_pb.SparseCheckoutRequest,
    metadata?: grpcWeb.Metadata | null): Promise<monorepo_pb.SparseCheckoutResponse>;

  configureSparseCheckout(
    request: monorepo_pb.SparseCheckoutRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: monorepo_pb.SparseCheckoutResponse) => void): grpcWeb.ClientReadableStream<monorepo_pb.SparseCheckoutResponse>;

  configureSparseCheckout(
    request: monorepo_pb.SparseCheckoutRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: monorepo_pb.SparseCheckoutResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/monorepo.MonorepoService/ConfigureSparseCheckout',
        request,
        metadata || {},
        this.methodDescriptorConfigureSparseCheckout,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/monorepo.MonorepoService/ConfigureSparseCheckout',
    request,
    metadata || {},
    this.methodDescriptorConfigureSparseCheckout);
  }

  methodDescriptorDownloadPath = new grpcWeb.MethodDescriptor(
    '/monorepo.MonorepoService/DownloadPath',
    grpcWeb.MethodType.UNARY,
    monorepo_pb.DownloadPathRequest,
    monorepo_pb.DownloadPathResponse,
    (request: monorepo_pb.DownloadPathRequest) => {
      return request.serializeBinary();
    },
    monorepo_pb.DownloadPathResponse.deserializeBinary
  );

  downloadPath(
    request: monorepo_pb.DownloadPathRequest,
    metadata?: grpcWeb.Metadata | null): Promise<monorepo_pb.DownloadPathResponse>;

  downloadPath(
    request: monorepo_pb.DownloadPathRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: monorepo_pb.DownloadPathResponse) => void): grpcWeb.ClientReadableStream<monorepo_pb.DownloadPathResponse>;

  downloadPath(
    request: monorepo_pb.DownloadPathRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: monorepo_pb.DownloadPathResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/monorepo.MonorepoService/DownloadPath',
        request,
        metadata || {},
        this.methodDescriptorDownloadPath,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/monorepo.MonorepoService/DownloadPath',
    request,
    metadata || {},
    this.methodDescriptorDownloadPath);
  }

  methodDescriptorAddTrackedPath = new grpcWeb.MethodDescriptor(
    '/monorepo.MonorepoService/AddTrackedPath',
    grpcWeb.MethodType.UNARY,
    monorepo_pb.AddTrackedPathRequest,
    monorepo_pb.AddTrackedPathResponse,
    (request: monorepo_pb.AddTrackedPathRequest) => {
      return request.serializeBinary();
    },
    monorepo_pb.AddTrackedPathResponse.deserializeBinary
  );

  addTrackedPath(
    request: monorepo_pb.AddTrackedPathRequest,
    metadata?: grpcWeb.Metadata | null): Promise<monorepo_pb.AddTrackedPathResponse>;

  addTrackedPath(
    request: monorepo_pb.AddTrackedPathRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: monorepo_pb.AddTrackedPathResponse) => void): grpcWeb.ClientReadableStream<monorepo_pb.AddTrackedPathResponse>;

  addTrackedPath(
    request: monorepo_pb.AddTrackedPathRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: monorepo_pb.AddTrackedPathResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/monorepo.MonorepoService/AddTrackedPath',
        request,
        metadata || {},
        this.methodDescriptorAddTrackedPath,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/monorepo.MonorepoService/AddTrackedPath',
    request,
    metadata || {},
    this.methodDescriptorAddTrackedPath);
  }

}

