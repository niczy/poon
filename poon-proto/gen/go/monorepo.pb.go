// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.27.3
// source: monorepo.proto

package gen

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request to merge a patch
type MergePatchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`       // Target path in the monorepo
	Patch         []byte                 `protobuf:"bytes,2,opt,name=patch,proto3" json:"patch,omitempty"`     // The patch content (unified diff format)
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"` // Commit message
	Author        string                 `protobuf:"bytes,4,opt,name=author,proto3" json:"author,omitempty"`   // Author information
	Branch        string                 `protobuf:"bytes,5,opt,name=branch,proto3" json:"branch,omitempty"`   // Target branch (default: main)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MergePatchRequest) Reset() {
	*x = MergePatchRequest{}
	mi := &file_monorepo_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MergePatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergePatchRequest) ProtoMessage() {}

func (x *MergePatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_monorepo_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergePatchRequest.ProtoReflect.Descriptor instead.
func (*MergePatchRequest) Descriptor() ([]byte, []int) {
	return file_monorepo_proto_rawDescGZIP(), []int{0}
}

func (x *MergePatchRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *MergePatchRequest) GetPatch() []byte {
	if x != nil {
		return x.Patch
	}
	return nil
}

func (x *MergePatchRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *MergePatchRequest) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *MergePatchRequest) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

// Response from merging a patch
type MergePatchResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	CommitHash    string                 `protobuf:"bytes,3,opt,name=commit_hash,json=commitHash,proto3" json:"commit_hash,omitempty"`
	Conflicts     []string               `protobuf:"bytes,4,rep,name=conflicts,proto3" json:"conflicts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MergePatchResponse) Reset() {
	*x = MergePatchResponse{}
	mi := &file_monorepo_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MergePatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergePatchResponse) ProtoMessage() {}

func (x *MergePatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_monorepo_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergePatchResponse.ProtoReflect.Descriptor instead.
func (*MergePatchResponse) Descriptor() ([]byte, []int) {
	return file_monorepo_proto_rawDescGZIP(), []int{1}
}

func (x *MergePatchResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *MergePatchResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *MergePatchResponse) GetCommitHash() string {
	if x != nil {
		return x.CommitHash
	}
	return ""
}

func (x *MergePatchResponse) GetConflicts() []string {
	if x != nil {
		return x.Conflicts
	}
	return nil
}

// Request to read a directory
type ReadDirectoryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`            // Directory path
	Branch        string                 `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`        // Branch name (default: main)
	Recursive     bool                   `protobuf:"varint,3,opt,name=recursive,proto3" json:"recursive,omitempty"` // Whether to list recursively
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadDirectoryRequest) Reset() {
	*x = ReadDirectoryRequest{}
	mi := &file_monorepo_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadDirectoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadDirectoryRequest) ProtoMessage() {}

func (x *ReadDirectoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_monorepo_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadDirectoryRequest.ProtoReflect.Descriptor instead.
func (*ReadDirectoryRequest) Descriptor() ([]byte, []int) {
	return file_monorepo_proto_rawDescGZIP(), []int{2}
}

func (x *ReadDirectoryRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ReadDirectoryRequest) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *ReadDirectoryRequest) GetRecursive() bool {
	if x != nil {
		return x.Recursive
	}
	return false
}

// Response containing directory contents
type ReadDirectoryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*DirectoryItem       `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadDirectoryResponse) Reset() {
	*x = ReadDirectoryResponse{}
	mi := &file_monorepo_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadDirectoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadDirectoryResponse) ProtoMessage() {}

func (x *ReadDirectoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_monorepo_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadDirectoryResponse.ProtoReflect.Descriptor instead.
func (*ReadDirectoryResponse) Descriptor() ([]byte, []int) {
	return file_monorepo_proto_rawDescGZIP(), []int{3}
}

func (x *ReadDirectoryResponse) GetItems() []*DirectoryItem {
	if x != nil {
		return x.Items
	}
	return nil
}

// A single directory item
type DirectoryItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	IsDir         bool                   `protobuf:"varint,2,opt,name=is_dir,json=isDir,proto3" json:"is_dir,omitempty"`
	Size          int64                  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	ModTime       int64                  `protobuf:"varint,4,opt,name=mod_time,json=modTime,proto3" json:"mod_time,omitempty"` // Unix timestamp
	Hash          string                 `protobuf:"bytes,5,opt,name=hash,proto3" json:"hash,omitempty"`                       // Git object hash
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DirectoryItem) Reset() {
	*x = DirectoryItem{}
	mi := &file_monorepo_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DirectoryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectoryItem) ProtoMessage() {}

func (x *DirectoryItem) ProtoReflect() protoreflect.Message {
	mi := &file_monorepo_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectoryItem.ProtoReflect.Descriptor instead.
func (*DirectoryItem) Descriptor() ([]byte, []int) {
	return file_monorepo_proto_rawDescGZIP(), []int{4}
}

func (x *DirectoryItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DirectoryItem) GetIsDir() bool {
	if x != nil {
		return x.IsDir
	}
	return false
}

func (x *DirectoryItem) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *DirectoryItem) GetModTime() int64 {
	if x != nil {
		return x.ModTime
	}
	return 0
}

func (x *DirectoryItem) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

// Request to read a file
type ReadFileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`         // File path
	Branch        string                 `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`     // Branch name (default: main)
	Revision      string                 `protobuf:"bytes,3,opt,name=revision,proto3" json:"revision,omitempty"` // Specific revision/commit hash
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadFileRequest) Reset() {
	*x = ReadFileRequest{}
	mi := &file_monorepo_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadFileRequest) ProtoMessage() {}

func (x *ReadFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_monorepo_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadFileRequest.ProtoReflect.Descriptor instead.
func (*ReadFileRequest) Descriptor() ([]byte, []int) {
	return file_monorepo_proto_rawDescGZIP(), []int{5}
}

func (x *ReadFileRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ReadFileRequest) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *ReadFileRequest) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

// Response containing file contents
type ReadFileResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Content       []byte                 `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Hash          string                 `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"` // Git object hash
	Size          int64                  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadFileResponse) Reset() {
	*x = ReadFileResponse{}
	mi := &file_monorepo_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadFileResponse) ProtoMessage() {}

func (x *ReadFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_monorepo_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadFileResponse.ProtoReflect.Descriptor instead.
func (*ReadFileResponse) Descriptor() ([]byte, []int) {
	return file_monorepo_proto_rawDescGZIP(), []int{6}
}

func (x *ReadFileResponse) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *ReadFileResponse) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *ReadFileResponse) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

// Request for file history
type FileHistoryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`     // File path
	Branch        string                 `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"` // Branch name (default: main)
	Limit         int32                  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`  // Maximum number of commits to return
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileHistoryRequest) Reset() {
	*x = FileHistoryRequest{}
	mi := &file_monorepo_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileHistoryRequest) ProtoMessage() {}

func (x *FileHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_monorepo_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileHistoryRequest.ProtoReflect.Descriptor instead.
func (*FileHistoryRequest) Descriptor() ([]byte, []int) {
	return file_monorepo_proto_rawDescGZIP(), []int{7}
}

func (x *FileHistoryRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FileHistoryRequest) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *FileHistoryRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// Response containing file history
type FileHistoryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Commits       []*Commit              `protobuf:"bytes,1,rep,name=commits,proto3" json:"commits,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileHistoryResponse) Reset() {
	*x = FileHistoryResponse{}
	mi := &file_monorepo_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileHistoryResponse) ProtoMessage() {}

func (x *FileHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_monorepo_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileHistoryResponse.ProtoReflect.Descriptor instead.
func (*FileHistoryResponse) Descriptor() ([]byte, []int) {
	return file_monorepo_proto_rawDescGZIP(), []int{8}
}

func (x *FileHistoryResponse) GetCommits() []*Commit {
	if x != nil {
		return x.Commits
	}
	return nil
}

// A git commit
type Commit struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hash          string                 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Author        string                 `protobuf:"bytes,2,opt,name=author,proto3" json:"author,omitempty"`
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Timestamp     int64                  `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ChangedFiles  []string               `protobuf:"bytes,5,rep,name=changed_files,json=changedFiles,proto3" json:"changed_files,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Commit) Reset() {
	*x = Commit{}
	mi := &file_monorepo_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Commit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Commit) ProtoMessage() {}

func (x *Commit) ProtoReflect() protoreflect.Message {
	mi := &file_monorepo_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Commit.ProtoReflect.Descriptor instead.
func (*Commit) Descriptor() ([]byte, []int) {
	return file_monorepo_proto_rawDescGZIP(), []int{9}
}

func (x *Commit) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Commit) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *Commit) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Commit) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Commit) GetChangedFiles() []string {
	if x != nil {
		return x.ChangedFiles
	}
	return nil
}

// Request for available branches
type BranchesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BranchesRequest) Reset() {
	*x = BranchesRequest{}
	mi := &file_monorepo_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BranchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BranchesRequest) ProtoMessage() {}

func (x *BranchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_monorepo_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BranchesRequest.ProtoReflect.Descriptor instead.
func (*BranchesRequest) Descriptor() ([]byte, []int) {
	return file_monorepo_proto_rawDescGZIP(), []int{10}
}

// Response containing branches
type BranchesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Branches      []string               `protobuf:"bytes,1,rep,name=branches,proto3" json:"branches,omitempty"`
	DefaultBranch string                 `protobuf:"bytes,2,opt,name=default_branch,json=defaultBranch,proto3" json:"default_branch,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BranchesResponse) Reset() {
	*x = BranchesResponse{}
	mi := &file_monorepo_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BranchesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BranchesResponse) ProtoMessage() {}

func (x *BranchesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_monorepo_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BranchesResponse.ProtoReflect.Descriptor instead.
func (*BranchesResponse) Descriptor() ([]byte, []int) {
	return file_monorepo_proto_rawDescGZIP(), []int{11}
}

func (x *BranchesResponse) GetBranches() []string {
	if x != nil {
		return x.Branches
	}
	return nil
}

func (x *BranchesResponse) GetDefaultBranch() string {
	if x != nil {
		return x.DefaultBranch
	}
	return ""
}

// Request to create a new branch
type CreateBranchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                               // New branch name
	FromBranch    string                 `protobuf:"bytes,2,opt,name=from_branch,json=fromBranch,proto3" json:"from_branch,omitempty"` // Source branch (default: main)
	FromCommit    string                 `protobuf:"bytes,3,opt,name=from_commit,json=fromCommit,proto3" json:"from_commit,omitempty"` // Specific commit to branch from
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateBranchRequest) Reset() {
	*x = CreateBranchRequest{}
	mi := &file_monorepo_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBranchRequest) ProtoMessage() {}

func (x *CreateBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_monorepo_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBranchRequest.ProtoReflect.Descriptor instead.
func (*CreateBranchRequest) Descriptor() ([]byte, []int) {
	return file_monorepo_proto_rawDescGZIP(), []int{12}
}

func (x *CreateBranchRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateBranchRequest) GetFromBranch() string {
	if x != nil {
		return x.FromBranch
	}
	return ""
}

func (x *CreateBranchRequest) GetFromCommit() string {
	if x != nil {
		return x.FromCommit
	}
	return ""
}

// Response from creating a branch
type CreateBranchResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	BranchName    string                 `protobuf:"bytes,3,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	CommitHash    string                 `protobuf:"bytes,4,opt,name=commit_hash,json=commitHash,proto3" json:"commit_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateBranchResponse) Reset() {
	*x = CreateBranchResponse{}
	mi := &file_monorepo_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBranchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBranchResponse) ProtoMessage() {}

func (x *CreateBranchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_monorepo_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBranchResponse.ProtoReflect.Descriptor instead.
func (*CreateBranchResponse) Descriptor() ([]byte, []int) {
	return file_monorepo_proto_rawDescGZIP(), []int{13}
}

func (x *CreateBranchResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CreateBranchResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateBranchResponse) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *CreateBranchResponse) GetCommitHash() string {
	if x != nil {
		return x.CommitHash
	}
	return ""
}

var File_monorepo_proto protoreflect.FileDescriptor

const file_monorepo_proto_rawDesc = "" +
	"\n" +
	"\x0emonorepo.proto\x12\bmonorepo\"\x87\x01\n" +
	"\x11MergePatchRequest\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\x14\n" +
	"\x05patch\x18\x02 \x01(\fR\x05patch\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\x12\x16\n" +
	"\x06author\x18\x04 \x01(\tR\x06author\x12\x16\n" +
	"\x06branch\x18\x05 \x01(\tR\x06branch\"\x87\x01\n" +
	"\x12MergePatchResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x1f\n" +
	"\vcommit_hash\x18\x03 \x01(\tR\n" +
	"commitHash\x12\x1c\n" +
	"\tconflicts\x18\x04 \x03(\tR\tconflicts\"`\n" +
	"\x14ReadDirectoryRequest\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\x16\n" +
	"\x06branch\x18\x02 \x01(\tR\x06branch\x12\x1c\n" +
	"\trecursive\x18\x03 \x01(\bR\trecursive\"F\n" +
	"\x15ReadDirectoryResponse\x12-\n" +
	"\x05items\x18\x01 \x03(\v2\x17.monorepo.DirectoryItemR\x05items\"}\n" +
	"\rDirectoryItem\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x15\n" +
	"\x06is_dir\x18\x02 \x01(\bR\x05isDir\x12\x12\n" +
	"\x04size\x18\x03 \x01(\x03R\x04size\x12\x19\n" +
	"\bmod_time\x18\x04 \x01(\x03R\amodTime\x12\x12\n" +
	"\x04hash\x18\x05 \x01(\tR\x04hash\"Y\n" +
	"\x0fReadFileRequest\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\x16\n" +
	"\x06branch\x18\x02 \x01(\tR\x06branch\x12\x1a\n" +
	"\brevision\x18\x03 \x01(\tR\brevision\"T\n" +
	"\x10ReadFileResponse\x12\x18\n" +
	"\acontent\x18\x01 \x01(\fR\acontent\x12\x12\n" +
	"\x04hash\x18\x02 \x01(\tR\x04hash\x12\x12\n" +
	"\x04size\x18\x03 \x01(\x03R\x04size\"V\n" +
	"\x12FileHistoryRequest\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\x16\n" +
	"\x06branch\x18\x02 \x01(\tR\x06branch\x12\x14\n" +
	"\x05limit\x18\x03 \x01(\x05R\x05limit\"A\n" +
	"\x13FileHistoryResponse\x12*\n" +
	"\acommits\x18\x01 \x03(\v2\x10.monorepo.CommitR\acommits\"\x91\x01\n" +
	"\x06Commit\x12\x12\n" +
	"\x04hash\x18\x01 \x01(\tR\x04hash\x12\x16\n" +
	"\x06author\x18\x02 \x01(\tR\x06author\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\x12\x1c\n" +
	"\ttimestamp\x18\x04 \x01(\x03R\ttimestamp\x12#\n" +
	"\rchanged_files\x18\x05 \x03(\tR\fchangedFiles\"\x11\n" +
	"\x0fBranchesRequest\"U\n" +
	"\x10BranchesResponse\x12\x1a\n" +
	"\bbranches\x18\x01 \x03(\tR\bbranches\x12%\n" +
	"\x0edefault_branch\x18\x02 \x01(\tR\rdefaultBranch\"k\n" +
	"\x13CreateBranchRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1f\n" +
	"\vfrom_branch\x18\x02 \x01(\tR\n" +
	"fromBranch\x12\x1f\n" +
	"\vfrom_commit\x18\x03 \x01(\tR\n" +
	"fromCommit\"\x8c\x01\n" +
	"\x14CreateBranchResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x1f\n" +
	"\vbranch_name\x18\x03 \x01(\tR\n" +
	"branchName\x12\x1f\n" +
	"\vcommit_hash\x18\x04 \x01(\tR\n" +
	"commitHash2\xd3\x03\n" +
	"\x0fMonorepoService\x12G\n" +
	"\n" +
	"MergePatch\x12\x1b.monorepo.MergePatchRequest\x1a\x1c.monorepo.MergePatchResponse\x12P\n" +
	"\rReadDirectory\x12\x1e.monorepo.ReadDirectoryRequest\x1a\x1f.monorepo.ReadDirectoryResponse\x12A\n" +
	"\bReadFile\x12\x19.monorepo.ReadFileRequest\x1a\x1a.monorepo.ReadFileResponse\x12M\n" +
	"\x0eGetFileHistory\x12\x1c.monorepo.FileHistoryRequest\x1a\x1d.monorepo.FileHistoryResponse\x12D\n" +
	"\vGetBranches\x12\x19.monorepo.BranchesRequest\x1a\x1a.monorepo.BranchesResponse\x12M\n" +
	"\fCreateBranch\x12\x1d.monorepo.CreateBranchRequest\x1a\x1e.monorepo.CreateBranchResponseB$Z\"github.com/nic/poon/poon-proto/genb\x06proto3"

var (
	file_monorepo_proto_rawDescOnce sync.Once
	file_monorepo_proto_rawDescData []byte
)

func file_monorepo_proto_rawDescGZIP() []byte {
	file_monorepo_proto_rawDescOnce.Do(func() {
		file_monorepo_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_monorepo_proto_rawDesc), len(file_monorepo_proto_rawDesc)))
	})
	return file_monorepo_proto_rawDescData
}

var file_monorepo_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_monorepo_proto_goTypes = []any{
	(*MergePatchRequest)(nil),     // 0: monorepo.MergePatchRequest
	(*MergePatchResponse)(nil),    // 1: monorepo.MergePatchResponse
	(*ReadDirectoryRequest)(nil),  // 2: monorepo.ReadDirectoryRequest
	(*ReadDirectoryResponse)(nil), // 3: monorepo.ReadDirectoryResponse
	(*DirectoryItem)(nil),         // 4: monorepo.DirectoryItem
	(*ReadFileRequest)(nil),       // 5: monorepo.ReadFileRequest
	(*ReadFileResponse)(nil),      // 6: monorepo.ReadFileResponse
	(*FileHistoryRequest)(nil),    // 7: monorepo.FileHistoryRequest
	(*FileHistoryResponse)(nil),   // 8: monorepo.FileHistoryResponse
	(*Commit)(nil),                // 9: monorepo.Commit
	(*BranchesRequest)(nil),       // 10: monorepo.BranchesRequest
	(*BranchesResponse)(nil),      // 11: monorepo.BranchesResponse
	(*CreateBranchRequest)(nil),   // 12: monorepo.CreateBranchRequest
	(*CreateBranchResponse)(nil),  // 13: monorepo.CreateBranchResponse
}
var file_monorepo_proto_depIdxs = []int32{
	4,  // 0: monorepo.ReadDirectoryResponse.items:type_name -> monorepo.DirectoryItem
	9,  // 1: monorepo.FileHistoryResponse.commits:type_name -> monorepo.Commit
	0,  // 2: monorepo.MonorepoService.MergePatch:input_type -> monorepo.MergePatchRequest
	2,  // 3: monorepo.MonorepoService.ReadDirectory:input_type -> monorepo.ReadDirectoryRequest
	5,  // 4: monorepo.MonorepoService.ReadFile:input_type -> monorepo.ReadFileRequest
	7,  // 5: monorepo.MonorepoService.GetFileHistory:input_type -> monorepo.FileHistoryRequest
	10, // 6: monorepo.MonorepoService.GetBranches:input_type -> monorepo.BranchesRequest
	12, // 7: monorepo.MonorepoService.CreateBranch:input_type -> monorepo.CreateBranchRequest
	1,  // 8: monorepo.MonorepoService.MergePatch:output_type -> monorepo.MergePatchResponse
	3,  // 9: monorepo.MonorepoService.ReadDirectory:output_type -> monorepo.ReadDirectoryResponse
	6,  // 10: monorepo.MonorepoService.ReadFile:output_type -> monorepo.ReadFileResponse
	8,  // 11: monorepo.MonorepoService.GetFileHistory:output_type -> monorepo.FileHistoryResponse
	11, // 12: monorepo.MonorepoService.GetBranches:output_type -> monorepo.BranchesResponse
	13, // 13: monorepo.MonorepoService.CreateBranch:output_type -> monorepo.CreateBranchResponse
	8,  // [8:14] is the sub-list for method output_type
	2,  // [2:8] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_monorepo_proto_init() }
func file_monorepo_proto_init() {
	if File_monorepo_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_monorepo_proto_rawDesc), len(file_monorepo_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_monorepo_proto_goTypes,
		DependencyIndexes: file_monorepo_proto_depIdxs,
		MessageInfos:      file_monorepo_proto_msgTypes,
	}.Build()
	File_monorepo_proto = out.File
	file_monorepo_proto_goTypes = nil
	file_monorepo_proto_depIdxs = nil
}
