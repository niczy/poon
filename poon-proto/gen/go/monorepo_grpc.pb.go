// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: monorepo.proto

package _go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MonorepoService_MergePatch_FullMethodName              = "/monorepo.MonorepoService/MergePatch"
	MonorepoService_ReadDirectory_FullMethodName           = "/monorepo.MonorepoService/ReadDirectory"
	MonorepoService_ReadFile_FullMethodName                = "/monorepo.MonorepoService/ReadFile"
	MonorepoService_GetFileHistory_FullMethodName          = "/monorepo.MonorepoService/GetFileHistory"
	MonorepoService_GetBranches_FullMethodName             = "/monorepo.MonorepoService/GetBranches"
	MonorepoService_CreateBranch_FullMethodName            = "/monorepo.MonorepoService/CreateBranch"
	MonorepoService_CreateWorkspace_FullMethodName         = "/monorepo.MonorepoService/CreateWorkspace"
	MonorepoService_GetWorkspace_FullMethodName            = "/monorepo.MonorepoService/GetWorkspace"
	MonorepoService_UpdateWorkspace_FullMethodName         = "/monorepo.MonorepoService/UpdateWorkspace"
	MonorepoService_DeleteWorkspace_FullMethodName         = "/monorepo.MonorepoService/DeleteWorkspace"
	MonorepoService_ConfigureSparseCheckout_FullMethodName = "/monorepo.MonorepoService/ConfigureSparseCheckout"
	MonorepoService_DownloadPath_FullMethodName            = "/monorepo.MonorepoService/DownloadPath"
)

// MonorepoServiceClient is the client API for MonorepoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// MonorepoService provides operations for the internet-scale monorepo
type MonorepoServiceClient interface {
	// MergePatch applies a patch to the monorepo
	MergePatch(ctx context.Context, in *MergePatchRequest, opts ...grpc.CallOption) (*MergePatchResponse, error)
	// ReadDirectory lists the contents of a directory
	ReadDirectory(ctx context.Context, in *ReadDirectoryRequest, opts ...grpc.CallOption) (*ReadDirectoryResponse, error)
	// ReadFile returns the contents of a file
	ReadFile(ctx context.Context, in *ReadFileRequest, opts ...grpc.CallOption) (*ReadFileResponse, error)
	// GetFileHistory returns the commit history for a file
	GetFileHistory(ctx context.Context, in *FileHistoryRequest, opts ...grpc.CallOption) (*FileHistoryResponse, error)
	// GetBranches returns available branches
	GetBranches(ctx context.Context, in *BranchesRequest, opts ...grpc.CallOption) (*BranchesResponse, error)
	// CreateBranch creates a new branch
	CreateBranch(ctx context.Context, in *CreateBranchRequest, opts ...grpc.CallOption) (*CreateBranchResponse, error)
	// Workspace operations
	CreateWorkspace(ctx context.Context, in *CreateWorkspaceRequest, opts ...grpc.CallOption) (*CreateWorkspaceResponse, error)
	GetWorkspace(ctx context.Context, in *GetWorkspaceRequest, opts ...grpc.CallOption) (*GetWorkspaceResponse, error)
	UpdateWorkspace(ctx context.Context, in *UpdateWorkspaceRequest, opts ...grpc.CallOption) (*UpdateWorkspaceResponse, error)
	DeleteWorkspace(ctx context.Context, in *DeleteWorkspaceRequest, opts ...grpc.CallOption) (*DeleteWorkspaceResponse, error)
	// Sparse checkout operations
	ConfigureSparseCheckout(ctx context.Context, in *SparseCheckoutRequest, opts ...grpc.CallOption) (*SparseCheckoutResponse, error)
	// Download operations
	DownloadPath(ctx context.Context, in *DownloadPathRequest, opts ...grpc.CallOption) (*DownloadPathResponse, error)
}

type monorepoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMonorepoServiceClient(cc grpc.ClientConnInterface) MonorepoServiceClient {
	return &monorepoServiceClient{cc}
}

func (c *monorepoServiceClient) MergePatch(ctx context.Context, in *MergePatchRequest, opts ...grpc.CallOption) (*MergePatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MergePatchResponse)
	err := c.cc.Invoke(ctx, MonorepoService_MergePatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monorepoServiceClient) ReadDirectory(ctx context.Context, in *ReadDirectoryRequest, opts ...grpc.CallOption) (*ReadDirectoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadDirectoryResponse)
	err := c.cc.Invoke(ctx, MonorepoService_ReadDirectory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monorepoServiceClient) ReadFile(ctx context.Context, in *ReadFileRequest, opts ...grpc.CallOption) (*ReadFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadFileResponse)
	err := c.cc.Invoke(ctx, MonorepoService_ReadFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monorepoServiceClient) GetFileHistory(ctx context.Context, in *FileHistoryRequest, opts ...grpc.CallOption) (*FileHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileHistoryResponse)
	err := c.cc.Invoke(ctx, MonorepoService_GetFileHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monorepoServiceClient) GetBranches(ctx context.Context, in *BranchesRequest, opts ...grpc.CallOption) (*BranchesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BranchesResponse)
	err := c.cc.Invoke(ctx, MonorepoService_GetBranches_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monorepoServiceClient) CreateBranch(ctx context.Context, in *CreateBranchRequest, opts ...grpc.CallOption) (*CreateBranchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBranchResponse)
	err := c.cc.Invoke(ctx, MonorepoService_CreateBranch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monorepoServiceClient) CreateWorkspace(ctx context.Context, in *CreateWorkspaceRequest, opts ...grpc.CallOption) (*CreateWorkspaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateWorkspaceResponse)
	err := c.cc.Invoke(ctx, MonorepoService_CreateWorkspace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monorepoServiceClient) GetWorkspace(ctx context.Context, in *GetWorkspaceRequest, opts ...grpc.CallOption) (*GetWorkspaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWorkspaceResponse)
	err := c.cc.Invoke(ctx, MonorepoService_GetWorkspace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monorepoServiceClient) UpdateWorkspace(ctx context.Context, in *UpdateWorkspaceRequest, opts ...grpc.CallOption) (*UpdateWorkspaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateWorkspaceResponse)
	err := c.cc.Invoke(ctx, MonorepoService_UpdateWorkspace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monorepoServiceClient) DeleteWorkspace(ctx context.Context, in *DeleteWorkspaceRequest, opts ...grpc.CallOption) (*DeleteWorkspaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteWorkspaceResponse)
	err := c.cc.Invoke(ctx, MonorepoService_DeleteWorkspace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monorepoServiceClient) ConfigureSparseCheckout(ctx context.Context, in *SparseCheckoutRequest, opts ...grpc.CallOption) (*SparseCheckoutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SparseCheckoutResponse)
	err := c.cc.Invoke(ctx, MonorepoService_ConfigureSparseCheckout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monorepoServiceClient) DownloadPath(ctx context.Context, in *DownloadPathRequest, opts ...grpc.CallOption) (*DownloadPathResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownloadPathResponse)
	err := c.cc.Invoke(ctx, MonorepoService_DownloadPath_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MonorepoServiceServer is the server API for MonorepoService service.
// All implementations must embed UnimplementedMonorepoServiceServer
// for forward compatibility.
//
// MonorepoService provides operations for the internet-scale monorepo
type MonorepoServiceServer interface {
	// MergePatch applies a patch to the monorepo
	MergePatch(context.Context, *MergePatchRequest) (*MergePatchResponse, error)
	// ReadDirectory lists the contents of a directory
	ReadDirectory(context.Context, *ReadDirectoryRequest) (*ReadDirectoryResponse, error)
	// ReadFile returns the contents of a file
	ReadFile(context.Context, *ReadFileRequest) (*ReadFileResponse, error)
	// GetFileHistory returns the commit history for a file
	GetFileHistory(context.Context, *FileHistoryRequest) (*FileHistoryResponse, error)
	// GetBranches returns available branches
	GetBranches(context.Context, *BranchesRequest) (*BranchesResponse, error)
	// CreateBranch creates a new branch
	CreateBranch(context.Context, *CreateBranchRequest) (*CreateBranchResponse, error)
	// Workspace operations
	CreateWorkspace(context.Context, *CreateWorkspaceRequest) (*CreateWorkspaceResponse, error)
	GetWorkspace(context.Context, *GetWorkspaceRequest) (*GetWorkspaceResponse, error)
	UpdateWorkspace(context.Context, *UpdateWorkspaceRequest) (*UpdateWorkspaceResponse, error)
	DeleteWorkspace(context.Context, *DeleteWorkspaceRequest) (*DeleteWorkspaceResponse, error)
	// Sparse checkout operations
	ConfigureSparseCheckout(context.Context, *SparseCheckoutRequest) (*SparseCheckoutResponse, error)
	// Download operations
	DownloadPath(context.Context, *DownloadPathRequest) (*DownloadPathResponse, error)
	mustEmbedUnimplementedMonorepoServiceServer()
}

// UnimplementedMonorepoServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMonorepoServiceServer struct{}

func (UnimplementedMonorepoServiceServer) MergePatch(context.Context, *MergePatchRequest) (*MergePatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergePatch not implemented")
}
func (UnimplementedMonorepoServiceServer) ReadDirectory(context.Context, *ReadDirectoryRequest) (*ReadDirectoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadDirectory not implemented")
}
func (UnimplementedMonorepoServiceServer) ReadFile(context.Context, *ReadFileRequest) (*ReadFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadFile not implemented")
}
func (UnimplementedMonorepoServiceServer) GetFileHistory(context.Context, *FileHistoryRequest) (*FileHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileHistory not implemented")
}
func (UnimplementedMonorepoServiceServer) GetBranches(context.Context, *BranchesRequest) (*BranchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBranches not implemented")
}
func (UnimplementedMonorepoServiceServer) CreateBranch(context.Context, *CreateBranchRequest) (*CreateBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBranch not implemented")
}
func (UnimplementedMonorepoServiceServer) CreateWorkspace(context.Context, *CreateWorkspaceRequest) (*CreateWorkspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkspace not implemented")
}
func (UnimplementedMonorepoServiceServer) GetWorkspace(context.Context, *GetWorkspaceRequest) (*GetWorkspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkspace not implemented")
}
func (UnimplementedMonorepoServiceServer) UpdateWorkspace(context.Context, *UpdateWorkspaceRequest) (*UpdateWorkspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkspace not implemented")
}
func (UnimplementedMonorepoServiceServer) DeleteWorkspace(context.Context, *DeleteWorkspaceRequest) (*DeleteWorkspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkspace not implemented")
}
func (UnimplementedMonorepoServiceServer) ConfigureSparseCheckout(context.Context, *SparseCheckoutRequest) (*SparseCheckoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureSparseCheckout not implemented")
}
func (UnimplementedMonorepoServiceServer) DownloadPath(context.Context, *DownloadPathRequest) (*DownloadPathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadPath not implemented")
}
func (UnimplementedMonorepoServiceServer) mustEmbedUnimplementedMonorepoServiceServer() {}
func (UnimplementedMonorepoServiceServer) testEmbeddedByValue()                         {}

// UnsafeMonorepoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MonorepoServiceServer will
// result in compilation errors.
type UnsafeMonorepoServiceServer interface {
	mustEmbedUnimplementedMonorepoServiceServer()
}

func RegisterMonorepoServiceServer(s grpc.ServiceRegistrar, srv MonorepoServiceServer) {
	// If the following call pancis, it indicates UnimplementedMonorepoServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MonorepoService_ServiceDesc, srv)
}

func _MonorepoService_MergePatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergePatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonorepoServiceServer).MergePatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonorepoService_MergePatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonorepoServiceServer).MergePatch(ctx, req.(*MergePatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonorepoService_ReadDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonorepoServiceServer).ReadDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonorepoService_ReadDirectory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonorepoServiceServer).ReadDirectory(ctx, req.(*ReadDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonorepoService_ReadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonorepoServiceServer).ReadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonorepoService_ReadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonorepoServiceServer).ReadFile(ctx, req.(*ReadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonorepoService_GetFileHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonorepoServiceServer).GetFileHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonorepoService_GetFileHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonorepoServiceServer).GetFileHistory(ctx, req.(*FileHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonorepoService_GetBranches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BranchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonorepoServiceServer).GetBranches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonorepoService_GetBranches_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonorepoServiceServer).GetBranches(ctx, req.(*BranchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonorepoService_CreateBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonorepoServiceServer).CreateBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonorepoService_CreateBranch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonorepoServiceServer).CreateBranch(ctx, req.(*CreateBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonorepoService_CreateWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonorepoServiceServer).CreateWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonorepoService_CreateWorkspace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonorepoServiceServer).CreateWorkspace(ctx, req.(*CreateWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonorepoService_GetWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonorepoServiceServer).GetWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonorepoService_GetWorkspace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonorepoServiceServer).GetWorkspace(ctx, req.(*GetWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonorepoService_UpdateWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonorepoServiceServer).UpdateWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonorepoService_UpdateWorkspace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonorepoServiceServer).UpdateWorkspace(ctx, req.(*UpdateWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonorepoService_DeleteWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonorepoServiceServer).DeleteWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonorepoService_DeleteWorkspace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonorepoServiceServer).DeleteWorkspace(ctx, req.(*DeleteWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonorepoService_ConfigureSparseCheckout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SparseCheckoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonorepoServiceServer).ConfigureSparseCheckout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonorepoService_ConfigureSparseCheckout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonorepoServiceServer).ConfigureSparseCheckout(ctx, req.(*SparseCheckoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonorepoService_DownloadPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonorepoServiceServer).DownloadPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonorepoService_DownloadPath_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonorepoServiceServer).DownloadPath(ctx, req.(*DownloadPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MonorepoService_ServiceDesc is the grpc.ServiceDesc for MonorepoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MonorepoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "monorepo.MonorepoService",
	HandlerType: (*MonorepoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MergePatch",
			Handler:    _MonorepoService_MergePatch_Handler,
		},
		{
			MethodName: "ReadDirectory",
			Handler:    _MonorepoService_ReadDirectory_Handler,
		},
		{
			MethodName: "ReadFile",
			Handler:    _MonorepoService_ReadFile_Handler,
		},
		{
			MethodName: "GetFileHistory",
			Handler:    _MonorepoService_GetFileHistory_Handler,
		},
		{
			MethodName: "GetBranches",
			Handler:    _MonorepoService_GetBranches_Handler,
		},
		{
			MethodName: "CreateBranch",
			Handler:    _MonorepoService_CreateBranch_Handler,
		},
		{
			MethodName: "CreateWorkspace",
			Handler:    _MonorepoService_CreateWorkspace_Handler,
		},
		{
			MethodName: "GetWorkspace",
			Handler:    _MonorepoService_GetWorkspace_Handler,
		},
		{
			MethodName: "UpdateWorkspace",
			Handler:    _MonorepoService_UpdateWorkspace_Handler,
		},
		{
			MethodName: "DeleteWorkspace",
			Handler:    _MonorepoService_DeleteWorkspace_Handler,
		},
		{
			MethodName: "ConfigureSparseCheckout",
			Handler:    _MonorepoService_ConfigureSparseCheckout_Handler,
		},
		{
			MethodName: "DownloadPath",
			Handler:    _MonorepoService_DownloadPath_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "monorepo.proto",
}
